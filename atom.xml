<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹平的博客</title>
  
  <subtitle>一个菜鸡的学习记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.caopingping.com/"/>
  <updated>2018-12-27T07:17:20.228Z</updated>
  <id>http://www.caopingping.com/</id>
  
  <author>
    <name>曹平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP系统学习</title>
    <link href="http://www.caopingping.com/2018/12/27/HTTP%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.caopingping.com/2018/12/27/HTTP系统学习/</id>
    <published>2018-12-27T07:16:00.000Z</published>
    <updated>2018-12-27T07:17:20.228Z</updated>
    
    <content type="html"><![CDATA[<p>虽然日常都离不开HTTP，平时HTTP学习的很多，但是都很零碎，今天就把HTTP系统的整理一遍，形成一个完整的知识闭环。以下章节排序不是HTTP时序。</p><h2 id="http简介"><a href="#http简介" class="headerlink" title="http简介"></a>http简介</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h3><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。  </p><p>HTTP是一个基于TCP/IP通信协议来传递数据。</p><h3 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2.工作原理"></a>2.工作原理</h3><p>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p><p>Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>HTTP默认端口号为80。</p><p><strong>http有三个特点</strong></p><ul><li>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li></ul><p>但是随着时间的推移，网页越来越复杂，传统的无连接无状态就变得很低效，所以对针对无连接，Keep-Alive被提了出来，cookie,session等保持HTTP连接的技术也应运而生</p><h3 id="3-各版本HTTP"><a href="#3-各版本HTTP" class="headerlink" title="3.各版本HTTP"></a>3.各版本HTTP</h3><ul><li>HTTP/0.9<br>只有一个命令GET<br>没有HEADER等描述数据的信息<br>服务器发送完毕，就关闭TCP连接  </li><li>HTTP/1.0<br>增加了很多命令<br>增加status code和header<br>多字符集支持、多部分发送、权限、缓存等  </li><li>HTTP/1.1<br>持久连接<br>pipeline<br>增加host和其他一些命令  </li><li>HTTP2<br>所有数据以二进制传输<br>同一个连接里面发送多个请求不再需要按照顺序来<br>头信息压缩以及推送等提高效率的功能  </li></ul><p>目前使用最广泛的还是HTTP1.1</p><h3 id="4-HTTPS"><a href="#4-HTTPS" class="headerlink" title="4.HTTPS"></a>4.HTTPS</h3><p>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><p>我们这里只简单提一下HTTPS，主要学习HTTP</p><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成，下图给出了请求报文的一般格式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/blog/2018-12-27-1.webp 请求报文'" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h4><p>请求行分为三部分，请求方法，请求地址，协议版本</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>HTTP/1.1 定义的请求方法有8种：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。</p><p>最常的两种GET和POST，如果是RESTful接口的话一般会用到GET、POST、DELETE、PUT。</p><h5 id="请求地址"><a href="#请求地址" class="headerlink" title="请求地址"></a>请求地址</h5><p>URL:统一资源定位符，是一种自愿位置的抽象唯一识别方法。</p><blockquote><p>组成：&lt;协议&gt;：//&lt;主机&gt;：&lt;端口&gt;/&lt;路径&gt;?&lt;参数&gt; </p></blockquote><p>端口和路径有时可以省略（HTTP默认端口号是80）</p><p>GET请求会带参数</p><h5 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h5><p>协议版本的格式为：HTTP/主版本号.次版本号，常用的有HTTP/1.0和HTTP/1.1</p><h4 id="2-请求头部"><a href="#2-请求头部" class="headerlink" title="2.请求头部"></a>2.请求头部</h4><p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔。</p><table><thead><tr><th style="text-align:left">Headers</th><th style="text-align:left">解释</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">Accept</td><td style="text-align:left">指定客户端能够接收的内容类型</td><td style="text-align:left">Accept: text/plain, text/html</td></tr><tr><td style="text-align:left">Accept-Encoding</td><td style="text-align:left">指定浏览器可以支持的web服务器返回内容压缩编码类型。</td><td style="text-align:left">Accept-Encoding: gzip</td></tr><tr><td style="text-align:left">Cache-Control</td><td style="text-align:left">指定请求和响应遵循的缓存机制</td><td style="text-align:left">Cache-Control: no-cache</td></tr><tr><td style="text-align:left">Host</td><td style="text-align:left">指定请求的服务器的域名和端口号</td><td style="text-align:left">Host: <a href="http://www.caopingping.com">www.caopingping.com</a></td></tr><tr><td style="text-align:left">Connection</td><td style="text-align:left">表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td><td style="text-align:left">Connection:keep-alive</td></tr><tr><td style="text-align:left">referer</td><td style="text-align:left">先前网页的地址，当前请求网页紧随其后,即来路</td><td style="text-align:left">Referer: <a href="http://www.caopingping.com/about">http://www.caopingping.com/about</a></td></tr><tr><td style="text-align:left">User-Agent</td><td style="text-align:left">User-Agent的内容包含发出请求的用户信息</td><td style="text-align:left">User-Agent: Mozilla/5.0 (Linux; X11)</td></tr></tbody></table><p>请求头部的最后会有一个空行，表示请求头部结束，接下来为请求数据，这一行非常重要，必不可少。</p><h4 id="3-请求数据"><a href="#3-请求数据" class="headerlink" title="3.请求数据"></a>3.请求数据</h4><p>请求数据可选，比如GET请求没有请求数据</p><p>下面是一个POST请求的请求报文</p><blockquote><p>POST 　/index.php　HTTP/1.1  请求行<br>  Host: localhost  请求头<br>  User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2<br>  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8<br>  Accept-Language: zh-cn,zh;q=0.5<br>  Accept-Encoding: gzip, deflate<br>  Connection: keep-alive<br>  Referer: <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a><br>  Content-Length：25<br>  Content-Type：application/x-www-form-urlencoded<br>　　      <code>空行</code><br>  username=aa&amp;password=1234　　请求数据  </p></blockquote><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/2018-12-27-2.webp" alt="响应报文" title="">                </div>                <div class="image-caption">响应报文</div>            </figure><p>HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。</p><h4 id="1-状态行"><a href="#1-状态行" class="headerlink" title="1.状态行"></a>1.状态行</h4><p>由3部分组成，分别为：协议版本，状态码，状态码描述。</p><p>其中协议版本与请求报文一致，状态码描述是对状态码的简单描述，所以这里就只介绍状态码。</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>状态代码为3位数字。<br>1xx：指示信息–表示请求已接收，继续处理。<br>2xx：成功–表示请求已被成功接收、理解、接受。<br>3xx：重定向–要完成请求必须进行更进一步的操作。<br>4xx：客户端错误–请求有语法错误或请求无法实现。<br>5xx：服务器端错误–服务器未能实现合法的请求。  </p><p>下面列举几个常见的：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr></tbody></table><h4 id="2-响应头部"><a href="#2-响应头部" class="headerlink" title="2.响应头部"></a>2.响应头部</h4><p>与请求头部类似，为响应报文添加了一些附加信息<br>常见响应头部如下：</p><table><thead><tr><th style="text-align:left">Header</th><th style="text-align:left">解释</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left">Allow</td><td style="text-align:left">对某网络资源的有效的请求行为，不允许则返回405</td><td style="text-align:left">Allow: GET, HEAD</td></tr><tr><td style="text-align:left">Cache-Control</td><td style="text-align:left">告诉所有的缓存机制是否可以缓存及哪种类型</td><td style="text-align:left">Cache-Control: no-cache</td></tr><tr><td style="text-align:left">Content-Encoding</td><td style="text-align:left">web服务器支持的返回内容压缩编码类型。</td><td style="text-align:left">Content-Encoding: gzip</td></tr><tr><td style="text-align:left">Content-Type</td><td style="text-align:left">返回内容的MIME类型</td><td style="text-align:left">Content-Type: text/html; charset=utf-8</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">原始服务器消息发出的时间</td><td style="text-align:left">Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td style="text-align:left">ETag</td><td style="text-align:left">请求变量的实体标签的当前值</td><td style="text-align:left">ETag: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td style="text-align:left">Expires</td><td style="text-align:left">响应过期的日期和时间</td><td style="text-align:left">Expires: Thu, 01 Dec 2010 16:00:00 GMT</td></tr><tr><td style="text-align:left">Expires</td><td style="text-align:left">响应过期的日期和时间</td><td style="text-align:left">Expires: Thu, 01 Dec 2010 16:00:00 GMT</td></tr><tr><td style="text-align:left">Last-Modified</td><td style="text-align:left">请求资源的最后修改时间</td><td style="text-align:left">Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td></tr><tr><td style="text-align:left">Server</td><td style="text-align:left">web服务器软件名称</td><td style="text-align:left">Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td></tr><tr><td style="text-align:left">Expires</td><td style="text-align:left">响应过期的日期和时间</td><td style="text-align:left">Expires: Thu, 01 Dec 2010 16:00:00 GMT</td></tr></tbody></table><h4 id="2-响应数据"><a href="#2-响应数据" class="headerlink" title="2.响应数据"></a>2.响应数据</h4><p>用于存放需要返回给客户端的数据信息。</p><h2 id="HTTP请求与响应的过程"><a href="#HTTP请求与响应的过程" class="headerlink" title="HTTP请求与响应的过程"></a>HTTP请求与响应的过程</h2><h3 id="TCP-IP协议模型"><a href="#TCP-IP协议模型" class="headerlink" title="TCP/IP协议模型"></a>TCP/IP协议模型</h3><p>TCP/IP协议模型（Transmission Control Protocol/Internet Protocol），包含了一系列构成互联网基础的网络协议，是Internet的核心协议，通过20多年的发展已日渐成熟，并被广泛应用于局域网和广域网中，目前已成为事实上的国际标准。TCP/IP协议簇是一组不同层次上的多个协议的组合，通常被认为是一个四层协议系统，与OSI的七层模型相对应。</p><p>HTTP协议就是基于TCP/IP协议模型来传输信息的。</p><p>下面这张图可以清楚的看明白TCP/IP模型的角度下HTTP请求与响应的过程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/2018-12-27-4.webp" alt="TCP/IP模型的角度下HTTP请求与响应" title="">                </div>                <div class="image-caption">TCP/IP模型的角度下HTTP请求与响应</div>            </figure><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/2018-12-27-5.webp" alt="TCP三次握手" title="">                </div>                <div class="image-caption">TCP三次握手</div>            </figure><p>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；  </p><p>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p><blockquote><p>为什么要三次握手</p></blockquote><blockquote><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p></blockquote><blockquote><p>例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p></blockquote><p>现在就可以进行数据请求了，也就是上文的请求与响应。</p><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/2018-12-27-6.webp" alt="TCP四次挥手" title="">                </div>                <div class="image-caption">TCP四次挥手</div>            </figure><p>第一次分手：主机1（可以是客户端，也可以是服务器端），设置Sequence Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；</p><p>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</p><p>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</p><p>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p><blockquote><p>为什么要四次分手</p></blockquote><blockquote><p>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一图以蔽之</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://caopingping.com/2018-12-27-7.webp" alt="HTTP流程总结" title="">                </div>                <div class="image-caption">HTTP流程总结</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然日常都离不开HTTP，平时HTTP学习的很多，但是都很零碎，今天就把HTTP系统的整理一遍，形成一个完整的知识闭环。以下章节排序不是HTTP时序。&lt;/p&gt;
&lt;h2 id=&quot;http简介&quot;&gt;&lt;a href=&quot;#http简介&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://www.caopingping.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>linux下git免登陆设置</title>
    <link href="http://www.caopingping.com/2018/11/16/linux%E4%B8%8Bgit%E5%85%8D%E7%99%BB%E9%99%86%E8%AE%BE%E7%BD%AE/"/>
    <id>http://www.caopingping.com/2018/11/16/linux下git免登陆设置/</id>
    <published>2018-11-16T07:51:00.000Z</published>
    <updated>2018-11-16T07:53:45.930Z</updated>
    
    <content type="html"><![CDATA[<p>使用Git的时候，每次操作都得输入用户名密码，神烦啊！<br>网上找了资料很快就弄好了，做个记录，以备不时之需。</p><h3 id="1-创建-git-credentials文件"><a href="#1-创建-git-credentials文件" class="headerlink" title="1.创建.git-credentials文件"></a>1.创建.git-credentials文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">vim .git-credentials</span><br></pre></td></tr></table></figure><p>在文件中写入</p><blockquote><p><code>https://{username}:{password}@github.com</code></p></blockquote><p>即你的用户名密码，保存退出。</p><h3 id="2-在终端下执行"><a href="#2-在终端下执行" class="headerlink" title="2.在终端下执行"></a>2.在终端下执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h3 id="3-查看是否成功"><a href="#3-查看是否成功" class="headerlink" title="3.查看是否成功"></a>3.查看是否成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.gitconfig</span><br></pre></td></tr></table></figure><p>如果多了一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">helper = store</span><br></pre></td></tr></table></figure><p>设置成功。下次就不用再输入用户名密码了。   </p><p>美滋滋。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Git的时候，每次操作都得输入用户名密码，神烦啊！&lt;br&gt;网上找了资料很快就弄好了，做个记录，以备不时之需。&lt;/p&gt;
&lt;h3 id=&quot;1-创建-git-credentials文件&quot;&gt;&lt;a href=&quot;#1-创建-git-credentials文件&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="git" scheme="http://www.caopingping.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建过程记录</title>
    <link href="http://www.caopingping.com/2018/11/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.caopingping.com/2018/11/15/hexo博客搭建过程记录/</id>
    <published>2018-11-15T04:50:00.000Z</published>
    <updated>2018-11-16T08:10:18.026Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直用的github.io搭的自己的博客，总觉得差点意思，还是自己整个服务器吧，以下是在阿里云centos7下完成的，记录一下。</p><h2 id="Node环境与Git安装"><a href="#Node环境与Git安装" class="headerlink" title="Node环境与Git安装"></a>Node环境与Git安装</h2><p>hexo基于nodeJs，所以首先要安装node</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget https://nodejs.org/dist/v10.13.0/node-v10.13.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v10.13.0-linux-x64.tar.xz</span><br><span class="line">mv node-v10.13.0-linux-x64  nodejs</span><br></pre></td></tr></table></figure><p>可以到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>下载需要的node版本，如果下载sourceCode源码版本，需要自己编译很长时间，不推荐，我下载的Linux Binaries (x64)</p><p>查看 nodejs文件夹 下有是否有node 和npm文件，如果没有重新下载安装。</p><h3 id="建立软链接"><a href="#建立软链接" class="headerlink" title="建立软链接"></a>建立软链接</h3><p>将npm和node命令转为全局命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/src/nodejs/bin/npm /usr/local/bin/npm</span><br><span class="line">ln -s /usr/local/src/nodejs/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure><h3 id="检验node是否已全局可用"><a href="#检验node是否已全局可用" class="headerlink" title="检验node是否已全局可用"></a>检验node是否已全局可用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>如果想使用cnpm 可以全局安装后，建立软链接，同2，不再赘述</p><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h3><p>进入hexo项目文件夹，我的是在/home/apps/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/apps/</span><br><span class="line">hexo init hexoblog</span><br><span class="line">cd hexoblog</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>安装完成后目录如下</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><ol><li>配置</li></ol><p>网站的初始配置都在_config.yml中，我们可以在其中修改大部分配置。</p><p>具体配置见 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener"><code>hexo官网</code></a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>安装完成后，hollow world 终于可以打开了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/apps/hexoblog</span><br><span class="line">hexo s</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>现在打开服务器ip 4000 端口即可看到Hellow world 页面啦<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pi40bre2b.bkt.clouddn.com/2018-11-15-hexo博客搭建过程记录-20181115.png-sy" alt="2018-11-15-hexo博客搭建过程记录-20181115" title="">                </div>                <div class="image-caption">2018-11-15-hexo博客搭建过程记录-20181115</div>            </figure></p><h3 id="主题的使用"><a href="#主题的使用" class="headerlink" title="主题的使用"></a>主题的使用</h3><p>hexo安装完成后切换主题极其简单，我现在用的是Material Design 风格的Hexo主题 <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener"><code>indigo</code></a> ,<br>更多主题可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener"><code>官网</code></a> 查看，选择你心仪的主题即可，亦可自己开发DIY。</p><blockquote><p>别忘了给作者start哦</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/apps/hexoblog/</span><br><span class="line">git clone https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure><p>然后将_config.yml中 <code>theme</code> 选项设为 <code>indigo</code> 即可</p><p>此主题需要安装依赖，具体步骤查看作者文档 <a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener"><code>文档</code></a></p><h3 id="hexo管理工具"><a href="#hexo管理工具" class="headerlink" title="hexo管理工具"></a>hexo管理工具</h3><p>如果我们每次写完都要把文件传到服务器，再 <code>hexo g -d</code>,那岂不是很麻烦，当然也可以接受，不过hexo-admin可以更方便的管理你的博文，是你在随便一个浏览器即可写作，美滋滋</p><p>看这里即可，使用极其简单</p><blockquote><p><a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">hexo-admin</a></p></blockquote><p>##结束</p><p>如果不出意外，现在你已经可以写文章了，具体的文章写作和加载，请直接看官网吧。有啥意外可以问我😀😀😀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前一直用的github.io搭的自己的博客，总觉得差点意思，还是自己整个服务器吧，以下是在阿里云centos7下完成的，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;Node环境与Git安装&quot;&gt;&lt;a href=&quot;#Node环境与Git安装&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.caopingping.com/tags/hexo/"/>
    
      <category term="node" scheme="http://www.caopingping.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>centos下nginx的安装与自启</title>
    <link href="http://www.caopingping.com/2018/11/14/centos%E4%B8%8Bnginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E8%87%AA%E5%90%AF/"/>
    <id>http://www.caopingping.com/2018/11/14/centos下nginx的安装与自启/</id>
    <published>2018-11-14T07:49:00.000Z</published>
    <updated>2018-11-16T08:08:38.184Z</updated>
    
    <content type="html"><![CDATA[<p>老早就想买个服务器，可惜囊中羞涩，一直没有下手，前两天逛阿里云看见个云翼计划，赶紧踩着青春的尾巴买了一年ECS<br>自己没事耍耍也是好的呀</p><blockquote><p><a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">阿里云翼计划</a>  </p></blockquote><p>废话不多说，这就开始</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>服务器一台 我用的是阿里云centos7</li><li>xshell 其它亦可</li><li>linux基本操作</li></ol><h2 id="nginx和配置"><a href="#nginx和配置" class="headerlink" title="nginx和配置"></a>nginx和配置</h2><p>我们一会还要安装node，node自己本身可以作为服务器进行驱动，但是node本身对文件的处理能力并不是很好，所以当我们的生产环境中应尽量使用nginx来处理静态的资源以及反向代理，同时也解决了node分布式以及负载均衡的相关问题。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>首先安装make gcc之类的东西，编译用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install automake autoconf libtool make</span><br><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>选择nginx安装目录，我选的是 /usr/local/src</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure></li><li><p>一般我们都需要先装pcre, zlib，前者为了重写rewrite，后者为了gzip压缩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz</span><br><span class="line">tar -zxvf pcre-8.42.tar.gz</span><br><span class="line">cd pcre-8.42</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><p>可以在<a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/" target="_blank" rel="noopener">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/</a>选择最新版本pcre</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>可以在<a href="http://zlib.net/" target="_blank" rel="noopener">http://zlib.net/</a>选择最新版本zlib</p><ol start="4"><li>安装ssl<br>网络通信安全，功能丰富且自包含的开源安全工具箱<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1.tar.gz</span><br><span class="line">tar -zxvf openssl-1.1.1.tar.gz</span><br></pre></td></tr></table></figure></li></ol><p>可以在<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a>选择最新版本openssl</p><ol start="4"><li>安装nginx</li></ol><p>Nginx 一般有两个版本，分别是稳定版和开发版，您可以根据您的目的来选择这两个版本的其中一个，下面是把 Nginx 安装到 /usr/local/nginx 目录下的详细步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.4.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.4.2.tar.gz</span><br><span class="line">cd nginx-1.4.2</span><br><span class="line"> </span><br><span class="line">./configure --sbin-path=/usr/local/nginx/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/nginx.pid \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-pcre=/usr/src/local/pcre-8.42 \</span><br><span class="line">--with-zlib=/usr/src/local/zlib-1.2.11 \</span><br><span class="line">--with-openssl=/usr/src/local/openssl-1.1.1</span><br><span class="line"> </span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>–with-pcre=/usr/src/local/pcre-8.42 指的是pcre-8.42 的源码路径。<br>–with-zlib=/usr/src/local/zlib-1.2.11 指的是zlib-1.2.11 的源码路径。</p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>安装成功后 /usr/local/nginx 目录下如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">drwx------  2 nobody root    4096 Nov  2 10:16 client_body_temp</span><br><span class="line">-rw-r--r--  1 root   root    1034 Nov  1 18:43 fastcgi.conf</span><br><span class="line">-rw-r--r--  1 root   root    1034 Nov  1 18:43 fastcgi.conf.default</span><br><span class="line">-rw-r--r--  1 root   root     964 Nov  1 18:43 fastcgi_params</span><br><span class="line">-rw-r--r--  1 root   root     964 Nov  1 18:43 fastcgi_params.default</span><br><span class="line">drwx------  2 nobody root    4096 Nov  2 10:16 fastcgi_temp</span><br><span class="line">drwxr-xr-x  2 root   root    4096 Nov  2 11:11 html</span><br><span class="line">-rw-r--r--  1 root   root    2837 Nov  1 18:43 koi-utf</span><br><span class="line">-rw-r--r--  1 root   root    2223 Nov  1 18:43 koi-win</span><br><span class="line">drwxr-xr-x  2 root   root    4096 Nov  2 10:16 logs</span><br><span class="line">-rw-r--r--  1 root   root    3463 Nov  1 18:43 mime.types</span><br><span class="line">-rw-r--r--  1 root   root    3463 Nov  1 18:43 mime.types.default</span><br><span class="line">-rwxr-xr-x  1 root   root 7177456 Nov  1 18:43 nginx</span><br><span class="line">-rw-r--r--  1 root   root    3937 Nov 13 16:14 nginx.conf</span><br><span class="line">-rw-r--r--  1 root   root    2685 Nov  1 18:43 nginx.conf.default</span><br><span class="line">-rw-r--r--  1 root   root       5 Nov 12 10:02 nginx.pid</span><br><span class="line">drwx------ 12 nobody root    4096 Nov 13 15:29 proxy_temp</span><br><span class="line">-rw-r--r--  1 root   root     596 Nov  1 18:43 scgi_params</span><br><span class="line">-rw-r--r--  1 root   root     596 Nov  1 18:43 scgi_params.default</span><br><span class="line">drwx------  2 nobody root    4096 Nov  2 10:16 scgi_temp</span><br><span class="line">-rw-r--r--  1 root   root     623 Nov  1 18:43 uwsgi_params</span><br><span class="line">-rw-r--r--  1 root   root     623 Nov  1 18:43 uwsgi_params.default</span><br><span class="line">drwx------  2 nobody root    4096 Nov  2 10:16 uwsgi_temp</span><br><span class="line">-rw-r--r--  1 root   root    3610 Nov  1 18:43 win-utf</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>现在打开浏览器，输入此机器IP即可看到  </p><blockquote><p>Welcome To Nginx</p></blockquote><p>安装成功！</p><h3 id="将nginx加入可执行程序目录"><a href="#将nginx加入可执行程序目录" class="headerlink" title="将nginx加入可执行程序目录"></a>将nginx加入可执行程序目录</h3><p>竟然每次操作nginx都要进入/usr/local/nginx/<br>好麻烦有木有<br>没关系 软链接来帮你<br>/usr/local/bin目录是给用户放置自己的可执行程序的地方,<br>我们只需在这里建立nginx的软链接即可全局执行nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nginx/nginx /usr/local/bin/nginx</span><br></pre></td></tr></table></figure><p>大功告成！</p><h3 id="设置nginx开机自启动"><a href="#设置nginx开机自启动" class="headerlink" title="设置nginx开机自启动"></a>设置nginx开机自启动</h3><p>每次开机我们都要启动nginx，同样巨麻烦，所以可以写一个自启动脚本，使其开机自启动，岂不美滋滋<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/rc.d/init.d</span><br><span class="line">vim nginxserver</span><br></pre></td></tr></table></figure></p><p>这是nginx官网上的自启脚本，将这些粘贴进nginxserver</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/local/nginx/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/usr/local/nginx/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><ol><li>:wq保存退出</li><li><p>增加脚本的可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/init.d/nginxserver</span><br></pre></td></tr></table></figure></li><li><p>添加脚本到开机自动启动项目中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/rc.d/init.d</span><br><span class="line">chkconfig --add nginxserver</span><br><span class="line">chkconfig nginxserver on</span><br></pre></td></tr></table></figure></li></ol><p>完事！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;老早就想买个服务器，可惜囊中羞涩，一直没有下手，前两天逛阿里云看见个云翼计划，赶紧踩着青春的尾巴买了一年ECS&lt;br&gt;自己没事耍耍也是好的呀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://promotion.aliyun.com/ntms/act
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.caopingping.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://www.caopingping.com/tags/nginx/"/>
    
  </entry>
  
</feed>
