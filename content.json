[{"title":"hexo博客搭建过程记录","date":"2018-11-16T03:29:00.000Z","path":"2018/11/16/hexo博客搭建过程记录/","text":"以前一直用的github.io搭的自己的博客，总觉得差点意思，还是自己整个服务器吧，以下是在阿里云centos7下完成的，记录一下。 Node环境与Git安装hexo基于nodeJs，所以首先要安装node 安装1234cd /usr/local/src/wget https://nodejs.org/dist/v10.13.0/node-v10.13.0-linux-x64.tar.xztar -xvf node-v10.13.0-linux-x64.tar.xzmv node-v10.13.0-linux-x64 nodejs 可以到https://nodejs.org/en/download/下载需要的node版本，如果下载sourceCode源码版本，需要自己编译很长时间，不推荐，我下载的Linux Binaries (x64) 查看 nodejs文件夹 下有是否有node 和npm文件，如果没有重新下载安装。 建立软链接将npm和node命令转为全局命令 12ln -s /usr/local/src/nodejs/bin/npm /usr/local/bin/npmln -s /usr/local/src/nodejs/bin/node /usr/local/bin/node 检验node是否已全局可用1node -v cnpm如果想使用cnpm 可以全局安装后，建立软链接，同2，不再赘述 git安装12yum -y install gitgit --version hexo安装全局安装hexo1npm install -g hexo-cli 初始化hexo项目进入hexo项目文件夹，我的是在/home/apps/ 1234cd /home/apps/hexo init hexoblogcd hexoblognpm i 安装完成后目录如下 node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 配置 网站的初始配置都在_config.yml中，我们可以在其中修改大部分配置。 具体配置见 hexo官网 启动安装完成后，hollow world 终于可以打开了 123cd /home/apps/hexobloghexo shexo g -d 现在打开服务器ip 4000 端口即可看到Hellow world 页面啦 2018-11-15-hexo博客搭建过程记录-20181115 主题的使用hexo安装完成后切换主题极其简单，我现在用的是Material Design 风格的Hexo主题 indigo ,更多主题可以在 官网 查看，选择你心仪的主题即可，亦可自己开发DIY。 别忘了给作者start哦 12cd /home/apps/hexoblog/git clone https://github.com/yscoder/hexo-theme-indigo.git themes/indigo 然后将_config.yml中 theme 选项设为 indigo 即可 此主题需要安装依赖，具体步骤查看作者文档 文档 hexo管理工具如果我们每次写完都要把文件传到服务器，再 hexo g -d,那岂不是很麻烦，当然也可以接受，不过hexo-admin可以更方便的管理你的博文，是你在随便一个浏览器即可写作，美滋滋 看这里即可，使用极其简单 hexo-admin ##结束 如果不出意外，现在你已经可以写文章了，具体的文章写作和加载，请直接看官网吧。有啥意外可以问我😀😀😀","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"centos下nginx的安装与自启","date":"2018-11-16T03:28:00.000Z","path":"2018/11/16/centos下nginx的安装与自启/","text":"老早就想买个服务器，可惜囊中羞涩，一直没有下手，前两天逛阿里云看见个云翼计划，赶紧踩着青春的尾巴买了一年ECS自己没事耍耍也是好的呀 阿里云翼计划 废话不多说，这就开始 准备工作 服务器一台 我用的是阿里云centos7 xshell 其它亦可 linux基本操作 nginx和配置我们一会还要安装node，node自己本身可以作为服务器进行驱动，但是node本身对文件的处理能力并不是很好，所以当我们的生产环境中应尽量使用nginx来处理静态的资源以及反向代理，同时也解决了node分布式以及负载均衡的相关问题。 安装 首先安装make gcc之类的东西，编译用 12yum -y install automake autoconf libtool makeyum install gcc gcc-c++ 选择nginx安装目录，我选的是 /usr/local/src 1cd /usr/local/src 一般我们都需要先装pcre, zlib，前者为了重写rewrite，后者为了gzip压缩。 123456wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gztar -zxvf pcre-8.42.tar.gzcd pcre-8.42./configuremakemake install 可以在ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/选择最新版本pcre 123456wget http://zlib.net/zlib-1.2.11.tar.gztar -zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11./configuremakemake install 可以在http://zlib.net/选择最新版本zlib 安装ssl网络通信安全，功能丰富且自包含的开源安全工具箱12wget https://www.openssl.org/source/openssl-1.1.1.tar.gztar -zxvf openssl-1.1.1.tar.gz 可以在https://www.openssl.org/source/选择最新版本openssl 安装nginx Nginx 一般有两个版本，分别是稳定版和开发版，您可以根据您的目的来选择这两个版本的其中一个，下面是把 Nginx 安装到 /usr/local/nginx 目录下的详细步骤：1234567891011121314wget http://nginx.org/download/nginx-1.4.2.tar.gztar -zxvf nginx-1.4.2.tar.gzcd nginx-1.4.2 ./configure --sbin-path=/usr/local/nginx/nginx \\--conf-path=/usr/local/nginx/nginx.conf \\--pid-path=/usr/local/nginx/nginx.pid \\--with-http_ssl_module \\--with-pcre=/usr/src/local/pcre-8.42 \\--with-zlib=/usr/src/local/zlib-1.2.11 \\--with-openssl=/usr/src/local/openssl-1.1.1 makemake install –with-pcre=/usr/src/local/pcre-8.42 指的是pcre-8.42 的源码路径。–with-zlib=/usr/src/local/zlib-1.2.11 指的是zlib-1.2.11 的源码路径。 安装完成安装成功后 /usr/local/nginx 目录下如下123456789101112131415161718192021222324drwx------ 2 nobody root 4096 Nov 2 10:16 client_body_temp-rw-r--r-- 1 root root 1034 Nov 1 18:43 fastcgi.conf-rw-r--r-- 1 root root 1034 Nov 1 18:43 fastcgi.conf.default-rw-r--r-- 1 root root 964 Nov 1 18:43 fastcgi_params-rw-r--r-- 1 root root 964 Nov 1 18:43 fastcgi_params.defaultdrwx------ 2 nobody root 4096 Nov 2 10:16 fastcgi_tempdrwxr-xr-x 2 root root 4096 Nov 2 11:11 html-rw-r--r-- 1 root root 2837 Nov 1 18:43 koi-utf-rw-r--r-- 1 root root 2223 Nov 1 18:43 koi-windrwxr-xr-x 2 root root 4096 Nov 2 10:16 logs-rw-r--r-- 1 root root 3463 Nov 1 18:43 mime.types-rw-r--r-- 1 root root 3463 Nov 1 18:43 mime.types.default-rwxr-xr-x 1 root root 7177456 Nov 1 18:43 nginx-rw-r--r-- 1 root root 3937 Nov 13 16:14 nginx.conf-rw-r--r-- 1 root root 2685 Nov 1 18:43 nginx.conf.default-rw-r--r-- 1 root root 5 Nov 12 10:02 nginx.piddrwx------ 12 nobody root 4096 Nov 13 15:29 proxy_temp-rw-r--r-- 1 root root 596 Nov 1 18:43 scgi_params-rw-r--r-- 1 root root 596 Nov 1 18:43 scgi_params.defaultdrwx------ 2 nobody root 4096 Nov 2 10:16 scgi_temp-rw-r--r-- 1 root root 623 Nov 1 18:43 uwsgi_params-rw-r--r-- 1 root root 623 Nov 1 18:43 uwsgi_params.defaultdrwx------ 2 nobody root 4096 Nov 2 10:16 uwsgi_temp-rw-r--r-- 1 root root 3610 Nov 1 18:43 win-utf 启动12cd /usr/local/nginx/./nginx 现在打开浏览器，输入此机器IP即可看到 Welcome To Nginx 安装成功！ 将nginx加入可执行程序目录竟然每次操作nginx都要进入/usr/local/nginx/好麻烦有木有没关系 软链接来帮你/usr/local/bin目录是给用户放置自己的可执行程序的地方,我们只需在这里建立nginx的软链接即可全局执行nginx 1ln -s /usr/local/nginx/nginx /usr/local/bin/nginx 大功告成！ 设置nginx开机自启动每次开机我们都要启动nginx，同样巨麻烦，所以可以写一个自启动脚本，使其开机自启动，岂不美滋滋12cd /etc/rc.d/init.dvim nginxserver 这是nginx官网上的自启脚本，将这些粘贴进nginxserver 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#!/bin/sh## nginx - this script starts and stops the nginx daemon## chkconfig: - 85 15# description: NGINX is an HTTP(S) server, HTTP(S) reverse \\# proxy and IMAP/POP3 proxy server# processname: nginx# config: /etc/nginx/nginx.conf# config: /etc/sysconfig/nginx# pidfile: /var/run/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ \"$NETWORKING\" = \"no\" ] &amp;&amp; exit 0nginx=\"/usr/local/nginx/nginx\"prog=$(basename $nginx)NGINX_CONF_FILE=\"/usr/local/nginx/nginx.conf\"[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxmake_dirs() &#123; # make required directories user=`$nginx -V 2&gt;&amp;1 | grep \"configure arguments:.*--user=\" | sed 's/[^*]*--user=\\([^ ]*\\).*/\\1/g' -` if [ -n \"$user\" ]; then if [ -z \"`grep $user /etc/passwd`\" ]; then useradd -M -s /bin/nologin $user fi options=`$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'` for opt in $options; do if [ `echo $opt | grep '.*-temp-path'` ]; then value=`echo $opt | cut -d \"=\" -f 2` if [ ! -d \"$value\" ]; then # echo \"creating\" $value mkdir -p $value &amp;&amp; chown -R $user $value fi fi done fi&#125;start() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 make_dirs echo -n $\"Starting $prog: \" daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $\"Stopping $prog: \" killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $\"Reloading $prog: \" killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case \"$1\" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $\"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;\" exit 2esac :wq保存退出 增加脚本的可执行权限 1chmod +x /etc/rc.d/init.d/nginxserver 添加脚本到开机自动启动项目中 123cd /etc/rc.d/init.dchkconfig --add nginxserverchkconfig nginxserver on 完事！","tags":[{"name":"centos","slug":"centos","permalink":"http://yoursite.com/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"}]}]